{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["SetTimer","props","count","className","id","title","idd","onClick","update","idl","idi","App","useState","breakCount","setBreakCount","sessionCount","setSessionCount","clockCount","setClockCount","currentTimer","setCurrentTimer","isPlaying","setIsPlaying","audioBeep","setAudioBeep","breakProps","num","sessionProps","useEffect","interval","setInterval","play","clearInterval","minutes","Math","floor","length","seconds","convertToTime","preload","src","ref","audio","pause","currentTime","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gQAGA,SAASA,EAASC,GAChB,IAAIC,EAAQD,EAAMC,MAYlB,OACE,yBAAKC,UAAU,mBACb,wBAAIC,GAAIH,EAAMG,IAAKH,EAAMI,OACzB,yBAAKF,UAAU,wBACb,4BAAQC,GAAIH,EAAMK,IAAKC,QAT7B,WAEEN,EAAMO,OAAON,EAAQ,GADT,IAC0BA,EAAQ,KAQxC,uBAAGC,UAAU,kBAEf,0BAAMC,GAAIH,EAAMQ,KAAMP,GACtB,4BAAQE,GAAIH,EAAMS,IAAKH,QAlB7B,WAEEN,EAAMO,OAAON,EAAQ,GADT,MAC0BA,EAAQ,KAiBxC,uBAAGC,UAAU,mBAwHRQ,MAjHf,WAAgB,IAAD,EACuBC,mBAAS,GADhC,mBACNC,EADM,KACMC,EADN,OAE2BF,mBAAS,IAFpC,mBAENG,EAFM,KAEQC,EAFR,OAGuBJ,mBAAS,MAHhC,mBAGNK,EAHM,KAGMC,EAHN,OAI2BN,mBAAS,WAJpC,mBAINO,EAJM,KAIQC,EAJR,OAKqBR,oBAAS,GAL9B,mBAKNS,EALM,KAKKC,EALL,OAMqBV,qBANrB,mBAMNW,EANM,KAMKC,EANL,KAQPC,EAAa,CACjBrB,GAAI,cACJC,MAAO,eACPC,IAAK,kBACLI,IAAK,kBACLD,IAAK,eACLP,MAAOW,EACPL,OAAQ,SAACkB,GAAD,OAAUL,EAAY,KAAOP,EAAcY,KAG/CC,EAAe,CACnBvB,GAAI,gBACJC,MAAO,iBACPC,IAAK,oBACLI,IAAK,oBACLD,IAAK,iBACLP,MAAOa,EACPP,OAAQ,SAACkB,GAAD,OACNL,EAAY,MAAQL,EAAgBU,GAAMR,EAAoB,GAANQ,MAwD5D,OA3BAE,qBAAU,WACR,IAAIC,EAAW,KAcf,OAbIR,GAAaJ,GAAc,EAC7BY,EAAWC,aAAY,WACrBZ,GAAc,SAACD,GAAD,OAAgBA,EAAa,OAC1C,KACMI,GAAaJ,EAAa,IACnCM,EAAUQ,OACVX,EAAgB,SAChBF,GAAc,SAACD,GAAD,MACK,YAAjBE,EAA0C,GAAbN,EAAiC,GAAfE,KAEjDK,EAAiC,YAAjBD,EAA6B,QAAU,YAGlD,WACLa,cAAcH,MAEf,CACDR,EACAJ,EACAE,EACAJ,EACAF,EACAU,IAIA,6BACE,4CACA,yBAAKpB,UAAU,QACb,kBAACH,EAAayB,GACd,kBAACzB,EAAa2B,IAEhB,yBAAKxB,UAAU,mBACb,wBAAIC,GAAG,eAAee,GACtB,0BAAMf,GAAG,aA9Df,SAAuBF,GACrB,IAAI+B,EAC4C,KAA7C,GAAKC,KAAKC,MAAMlB,EAAa,KAAKmB,OAC/B,IAAMF,KAAKC,MAAMlB,EAAa,IAC9B,GAAKiB,KAAKC,MAAMlB,EAAa,IAC/BoB,EACkC,KAAnC,GAAMpB,EAAa,IAAKmB,OACrB,IAAOnB,EAAa,GACpB,GAAMA,EAAa,GACzB,MAAM,GAAN,OAAUgB,EAAV,YAAqBI,GAqDKC,IACtB,2BACElC,GAAG,OACHmC,QAAQ,OACRC,IAAI,4GACJC,IAAK,SAACC,GACJlB,EAAakB,MAGjB,yBAAKvC,UAAU,QACb,4BAAQA,UAAU,SAASC,GAAG,aAAaG,QA5DnD,WACEe,GAAcD,KA4DN,uBAAGlB,UAAS,iBAAYkB,EAAY,QAAU,WAEhD,4BAAQlB,UAAU,SAASC,GAAG,QAAQG,QA3D9C,WACEO,EAAc,GACdE,EAAgB,IAChBE,EAAc,MACdE,EAAgB,WAChBE,GAAa,GACbC,EAAUoB,QACVpB,EAAUqB,YAAc,IAqDhB,uBAAGzC,UAAU,qBC7HL0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.934315d1.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nfunction SetTimer(props) {\n  var count = props.count;\n\n  function increaseCount() {\n    const MAX = 60;\n    props.update(count + 1 >= MAX ? MAX : count + 1);\n  }\n\n  function decreaseCount() {\n    const MIN = 1;\n    props.update(count - 1 <= MIN ? MIN : count - 1);\n  }\n\n  return (\n    <div className=\"timer-container\">\n      <h2 id={props.id}>{props.title}</h2>\n      <div className=\"flex actions-wrapper\">\n        <button id={props.idd} onClick={decreaseCount}>\n          <i className=\"fas fa-minus\" />\n        </button>\n        <span id={props.idl}>{count}</span>\n        <button id={props.idi} onClick={increaseCount}>\n          <i className=\"fas fa-plus\" />\n        </button>\n      </div>\n    </div>\n  );\n}\n\nfunction App() {\n  const [breakCount, setBreakCount] = useState(5);\n  const [sessionCount, setSessionCount] = useState(25);\n  const [clockCount, setClockCount] = useState(1500);\n  const [currentTimer, setCurrentTimer] = useState(\"Session\");\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [audioBeep, setAudioBeep] = useState();\n\n  const breakProps = {\n    id: \"break-label\",\n    title: \"Break Length\",\n    idd: \"break-decrement\",\n    idi: \"break-increment\",\n    idl: \"break-length\",\n    count: breakCount,\n    update: (num) => (isPlaying ? null : setBreakCount(num)),\n  };\n\n  const sessionProps = {\n    id: \"session-label\",\n    title: \"Session Length\",\n    idd: \"session-decrement\",\n    idi: \"session-increment\",\n    idl: \"session-length\",\n    count: sessionCount,\n    update: (num) =>\n      isPlaying ? null : (setSessionCount(num), setClockCount(num * 60)),\n  };\n\n  function convertToTime(count) {\n    let minutes =\n      (\"\" + Math.floor(clockCount / 60)).length === 1\n        ? \"0\" + Math.floor(clockCount / 60)\n        : \"\" + Math.floor(clockCount / 60);\n    let seconds =\n      (\"\" + (clockCount % 60)).length === 1\n        ? \"0\" + (clockCount % 60)\n        : \"\" + (clockCount % 60);\n    return `${minutes}:${seconds}`;\n  }\n\n  function handlePlayPause() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function handleReset() {\n    setBreakCount(5);\n    setSessionCount(25);\n    setClockCount(1500);\n    setCurrentTimer(\"Session\");\n    setIsPlaying(false);\n    audioBeep.pause();\n    audioBeep.currentTime = 0;\n  }\n\n  useEffect(() => {\n    let interval = null;\n    if (isPlaying && clockCount >= 0) {\n      interval = setInterval(() => {\n        setClockCount((clockCount) => clockCount - 1);\n      }, 1000);\n    } else if (isPlaying && clockCount < 0) {\n      audioBeep.play();\n      setCurrentTimer(\"Break\");\n      setClockCount((clockCount) =>\n        currentTimer === \"Session\" ? breakCount * 60 : sessionCount * 60\n      );\n      setCurrentTimer(currentTimer === \"Session\" ? \"Break\" : \"Session\");\n    }\n    // returned function will be called on component unmount\n    return () => {\n      clearInterval(interval);\n    };\n  }, [\n    isPlaying,\n    clockCount,\n    currentTimer,\n    sessionCount,\n    breakCount,\n    audioBeep,\n  ]);\n\n  return (\n    <div>\n      <h1>POMODO CLOCK</h1>\n      <div className=\"flex\">\n        <SetTimer {...breakProps} />\n        <SetTimer {...sessionProps} />\n      </div>\n      <div className=\"clock-container\">\n        <h1 id=\"timer-label\">{currentTimer}</h1>\n        <span id=\"time-left\">{convertToTime()}</span>\n        <audio\n          id=\"beep\"\n          preload=\"auto\"\n          src=\"https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav\"\n          ref={(audio) => {\n            setAudioBeep(audio);\n          }}\n        />\n        <div className=\"flex\">\n          <button className=\"button\" id=\"start_stop\" onClick={handlePlayPause}>\n            <i className={`fas fa-${isPlaying ? \"pause\" : \"play\"}`} />\n          </button>\n          <button className=\"button\" id=\"reset\" onClick={handleReset}>\n            <i className=\"fas fa-sync\" />\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}